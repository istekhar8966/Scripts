#!/bin/bash

# Git Manager for Dotfiles with Submodules
# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Function to handle submodules
handle_submodules() {
    print_status "Checking submodules..."

    # Get list of submodules with changes
    submodules_with_changes=$(git status --porcelain | grep "^.M" | awk '{print $2}')

    for submodule in $submodules_with_changes; do
        if [ -d "$submodule/.git" ]; then
            print_status "Processing submodule: $submodule"

            cd "$submodule"

            # Check if there are changes
            if ! git diff --quiet || ! git diff --staged --quiet; then
                git add .
                git commit -m "Auto update $submodule config - $(date '+%Y-%m-%d %H:%M')"

                # Try to push
                if git push origin main 2>/dev/null || git push origin master 2>/dev/null; then
                    print_success "Pushed $submodule changes"
                else
                    print_warning "Could not push $submodule - may need manual intervention"
                fi
            fi

            cd ..
        fi
    done
}

# Function to handle conflicts
resolve_conflicts() {
    if git status | grep -q "both modified\|both added"; then
        print_error "Merge conflicts detected!"
        print_status "Conflicted files:"
        git status | grep "both modified\|both added"

        echo "Please resolve conflicts manually and run:"
        echo "git add <resolved-files>"
        echo "git commit -m 'Resolve merge conflicts'"
        exit 1
    fi
}

# Main sync function
sync_dotfiles() {
    local commit_msg="$1"

    # Check for rebase in progress
    if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
        print_error "Interactive rebase in progress!"
        echo "Options:"
        echo "1. Continue rebase: git rebase --continue"
        echo "2. Abort rebase: git rebase --abort"
        echo "3. Skip current patch: git rebase --skip"
        exit 1
    fi

    # Handle submodules first
    handle_submodules

    # Check for conflicts
    resolve_conflicts

    # Add all changes
    git add .

    # Commit if there are changes
    if ! git diff --staged --quiet; then
        if [ -z "$commit_msg" ]; then
            commit_msg="Update dotfiles - $(date '+%Y-%m-%d %H:%M')"
        fi

        git commit -m "$commit_msg"
        print_success "Changes committed: $commit_msg"
    fi

    # Pull with merge strategy
    print_status "Pulling latest changes..."
    if git pull origin main --no-rebase; then
        print_success "Successfully pulled changes"
    else
        print_warning "Pull failed - may have conflicts"
        resolve_conflicts
    fi

    # Push changes
    print_status "Pushing to GitHub..."
    if git push origin main; then
        print_success "Successfully pushed to GitHub"
    else
        print_error "Push failed"
        return 1
    fi
}

# Check current state and provide guidance
check_state() {
    if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
        print_error "You are in the middle of an interactive rebase!"
        print_status "Current branch: $(git branch --show-current)"
        print_status "To fix this, run one of:"
        echo "  git rebase --abort    (to cancel rebase)"
        echo "  git rebase --continue (after resolving conflicts)"
        echo "  git rebase --skip     (to skip current patch)"
        return 1
    fi

    return 0
}

# Main execution
main() {
    print_status "Dotfiles Git Manager Started"
    print_status "Current directory: $(pwd)"

    if ! check_state; then
        exit 1
    fi

    sync_dotfiles "$1"

    print_success "Dotfiles sync completed!"
}

case "$1" in
    --fix)
        # Emergency fix mode
        print_status "Emergency fix mode"
        git rebase --abort 2>/dev/null || true
        git reset --hard HEAD
        git clean -fd
        main "Emergency fix - reset to clean state"
        ;;
    --status)
        git status
        git submodule status
        ;;
    *)
        main "$1"
        ;;
esac

